#apiVersion: v1
#kind: Pod
#metadata:
#  name: flask-app-pod
#  labels:
#    app: flask-app
#spec:
#  containers:
#  - name: flask-app
#    image: xyz010/ccbd_todo_app:latest
#    imagePullPolicy: Always
#    ports:
#    - containerPort: 5000
#    env:
#    - name: PORT
#      value: "5000"
#    - name: MONGO_HOST
#      value: mongodb-service
#    - name: MONGO_PORT
#      value: "27017"

#---
#apiVersion: v1
#kind: Pod
#metadata:
#  name: mongodb-pod
#  labels:
#    app: mongodb
#spec:
#  containers:
#  - name: mongodb
#    image: mongo:4.4
#    ports:
#    - containerPort: 27017
#  volumes:
#  - name: mongo-data
#    persistentVolumeClaim:
#      claimName: mongo-data-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 27017
      targetPort: 27017

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:4.4
          ports:
            - containerPort: 27017
          resources:
            limits:
              cpu: "1"
              memory: "512Mi"
            requests:
              cpu: "0.5"
              memory: "256Mi"
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-data-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
spec:
  selector:
    app: flask-app
  ports:
    - port: 5001
      targetPort: 5000
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app-deployment
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
        - name: flask-app
          image: xyz010/ccbd_todo_app:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 5000
          resources:
            limits:
              cpu: "1"
              memory: "512Mi"
            requests:
              cpu: "0.5"
              memory: "256Mi"
          env:
            - name: PORT
              value: "5000"
            - name: MONGO_HOST
              value: mongodb-service
            - name: MONGO_PORT
              value: "27017"
          livenessProbe:
            httpGet:
              path: /health
              port: 5001
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 5001
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 5
            failureThreshold: 3
#---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: alertmanager
#  namespace: monitoring
#spec:
#  selector:
#    matchLabels:
#      app: alertmanager
#  replicas: 1
#  template:
#    metadata:
#      labels:
#        app: alertmanager
#    spec:
#      containers:
#      - name: alertmanager
#        image: prom/alertmanager
#        args:
#        - '--config.file=/etc/config/alertmanager.yml'
#        ports:
#        - containerPort: 9093
#          protocol: TCP
#        volumeMounts:
#        - name: config-volume
#          mountPath: /etc/config
#      volumes:
#      - name: config-volume
#        configMap:
#          name: alertmanager-config
#          defaultMode: 420
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: alertmanager
#  namespace: monitoring
#spec:
#  selector:
#    app: alertmanager
#  ports:
#  - name: web
#    port: 9093
#    protocol: TCP
#    targetPort: 9093
#  type: NodePort

